ConditionalTable$Test == test)
source("MeanScoreByBorough.R")
state <- "Bronx"
test <- col_names[3]
mean(data5[,test])
score <-mean(data5$SAT.Math.Avg..Score)
ConditionalTable <- data.frame(matrix(0, nrow = 35, ncol = 6))
names(ConditionalTable)[1:6] <- c("Borough", "Test", "p_state", "p_score",
"p_state_score", "p_score_state")
index <- 1
for (state in bor_names_first){
for(test in col_names2){
p_state <- length(which(data5$Borough == state)) / nrow(data5)
p_score <- length(which(data5[, test] > score)) / nrow(data5)
p_state_score <- length(which(data5[, test] > score & data5$Borough == state)) / length(which(data5[, test] > score))
p_score_state <- length(which(data5[, test] > score & data5$Borough == state)) / length(which(data5$Borough == state))
ConditionalTable[index ,1:6] <- c(state, test, p_state, p_score,
p_state_score, p_score_state)
index <- index + 1
}
}
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in length(col_names2)){
state_top <- col_names2[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(col_names2)){
for(state_b_index in length(col_name2)){
state_bottom <- col_names2[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top] /
ConditionalTable$p_score_state[row_bottom]
BayesFactor[index, 1:4] <- c()
}
}
}
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in length(col_names2)){
state_top <- col_names2[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(col_names2)){
for(state_b_index in length(col_names2)){
state_bottom <- col_names2[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top] /
ConditionalTable$p_score_state[row_bottom]
BayesFactor[index, 1:4] <- c()
}
}
}
which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
which(ConditionalTable$Borough == state_top)
which(ConditionalTable$Borough == state_top)
rm(bor_names_last)
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in length(col_names2)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top] /
ConditionalTable$p_score_state[row_bottom]
BayesFactor[index, 1:4] <- c(test, state_top, state_bottom, BF)
}
}
}
BayesFactor
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in length(col_names2)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top] /
ConditionalTable$p_score_state[row_bottom]
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
}
}
}
BayesFactors
which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
View(ConditionalTable)
head(BayesFactors)
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top] /
ConditionalTable$p_score_state[row_bottom]
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
BF <- ConditionalTable$p_score_state[row_top]/ConditionalTable$p_score_state[row_bottom]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top]/ConditionalTable$p_score_state[row_bottom]
onditionalTable$p_score_state[row_top]
ConditionalTable$p_score_state[row_top]
ConditionalTable$p_score_state[row_bottom]
which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
hich(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top]/ConditionalTable$p_score_state[row_bottom]
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
head(BayesFactors)
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- ConditionalTable$p_score_state[row_top]/ConditionalTable$p_score_state[row_bottom]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.integer(ConditionalTable$p_score_state[row_top])/
as.integer(ConditionalTable$p_score_state[row_bottom])
as.integer(ConditionalTable$p_score_state[row_top])
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
head(BayesFactors)
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(test in  col_names2){
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
head(BayesFactors)
BayesFactors
index <- 1
for(test in 1:col_names2){
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
length(bor_names_first)
index <- 1
for(test in col_names2){
for(state_t_index in length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index > length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(test in col_names2){
for(state_t_index in length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index < length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
BayesFactors <- data.frame(matrix(0, nrow = 25, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(test in col_names2){
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_index <- state_t_index + 1
if (state_b_index < length(bor_names_first)){
for(state_b_index in 1:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
1.445^-1
BayesFactors <- data.frame(matrix(0, nrow = 60, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(test in col_names2){
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_start_i <- state_t_index + 1
if (state_b_index <= length(bor_names_first)){
for(state_b_index in state_b_start_i:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
BayesFactors <- data.frame(matrix(0, nrow = 60, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(test in col_names2){
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_start_i <- state_t_index + 1
if (state_b_start_i <= length(bor_names_first)){
for(state_b_index in state_b_start_i:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
}
BayesFactors
BayesFactors <- data.frame(matrix(0, nrow = 40, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_start_i <- state_t_index + 1
if (state_b_start_i <= length(bor_names_first)){
for(state_b_index in state_b_start_i:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
BayesFactors
BayesFactors <- data.frame(matrix(0, nrow = 10, ncol = 4))
names(BayesFactors)[1:4] <- c("Test", "State_top", "State_bottom", "BayesFactor")
index <- 1
for(state_t_index in 1:length(bor_names_first)){
state_top <- bor_names_first[state_t_index]
state_b_start_i <- state_t_index + 1
if (state_b_start_i <= length(bor_names_first)){
for(state_b_index in state_b_start_i:length(bor_names_first)){
state_bottom <- bor_names_first[state_b_index]
row_top <- which(ConditionalTable$Borough == state_top &
ConditionalTable$Test == test)
row_bottom <- which(ConditionalTable$Borough == state_bottom &
ConditionalTable$Test == test)
BF <- as.double(ConditionalTable$p_score_state[row_top])/as.double(ConditionalTable$p_score_state[row_bottom])
BayesFactors[index, 1:4] <- c(test, state_top, state_bottom, BF)
index <- index + 1
}
}
}
BayesFactors
?sort
sort(BayesFactors$BayesFactor)
sort(BayesFactors)
?order
BayesFactors[order(BayesFactors$BayesFactor)]
BayesFactors[order(BayesFactor)]
order_by()
?order_by
BayesFactors
order_by(BayesFactors$BayesFactor)
?sort
BayesFactors <- BayesFactors[order(BayesFactor),]
BayesFactors <- BayesFactors[order(BayesFactors$BayesFactor),]
(BayesFactors <- BayesFactors[order(BayesFactors$BayesFactor),])
(BayesFactors <- BayesFactors[order(BayesFactors$BayesFactor, decreasing = F),])
(BayesFactors <- BayesFactors[order(BayesFactors$BayesFactor, decreasing = T),])
.1212121^-1
.18428^-1
setwd("C:/Users/board/Desktop/Kaggle/SAT_Scores")
data2 <- read.csv("New_York_City_SAT_Results.csv")
colnames(data2)
head(data2)
summary(data2)
continous_var_names <- colnames(data2)[3:6]
library(dplyr)
filtered_s_data <- filter(data2, data2[[6]] !='s')
summary(filtered_s_data)
data5 <- data.frame(apply(filtered_s_data[,3:6], 2,
function(x) as.numeric(x)))
summary(data5)
hist(data5[[2]]) # Crit Reading
borough_checker <- function(code){
borough <- 'NA'
if(grepl('X' ,code)) borough <- "Bronx"
if(grepl('K', code)) borough <- "Brooklyn"
if(grepl('Q', code)) borough <- "Queens"
if(grepl('M', code)) borough <- "Manhattan"
if(grepl('R', code)) borough <- "Staten Island"
return(borough)
}
filt_DBN <- as.character(filtered_s_data$DBN)
bors <- rep(0,length(filt_DBN))
for ( i in 1:length(filt_DBN)){
bors[i] <- borough_checker(filt_DBN[i])
}
sum(bors == "NA")
data5$Borough <- as.factor(bors)
aggregate(data5[,1:4], by=list(data5[,5]), FUN=mean)
library(sm)
install.packages("sm")
for (i in 1:4){
sm.density.compare(data5[,i], data5$Borough,
lwd = 3,
xlab = colnames(data5)[i])
# Add title to plot
title(main = colnames(data5)[i])
# Add legend to plot
legend("topright", levels(data5$Borough), fill=2+(0:nlevels(data5$Borough)))
}
library(sm)
for (i in 1:4){
sm.density.compare(data5[,i], data5$Borough,
lwd = 3,
xlab = colnames(data5)[i])
# Add title to plot
title(main = colnames(data5)[i])
# Add legend to plot
legend("topright", levels(data5$Borough), fill=2+(0:nlevels(data5$Borough)))
}
bor_names_first <- unique(bors)
bor_names_last <- bor_names_first
col_names <- colnames(data5)
col_names2 <- col_names[-5]
df <- data.frame(matrix(0, nrow = 4*4, ncol = 7))
names(df)[1:7] <- c("CategoryName", "Borough1", "Borough2", "P-value",
"Bx Score", "Borough Score" ,"Mean the same" )
index <- 1
for (bor_first in bor_names_first){
# Remove first element in borough array (the one that will be compared)
bor_names_last <- bor_names_last[-1]
# Loop through second list of boroughs
for (bor_last in bor_names_last){
# Loop through the various categories of tests
for (name in col_names2 ){
# Conduct hypothesis test for similar means
ttester <- t.test(data5[data5$Borough == bor_first, name],
data5[data5$Borough == bor_last, name])
# Store temp p value
temp_pval <- ttester$p.value
# H0 mean are the same
# P low reject H0 --> Bx mean =/= bor mean
same_mean <- if(abs(temp_pval) < 0.05) F else T
temp_mean_values <- ttester$estimate
# Store values to data frame
df[index,1:7] <- c(name, bor_first, bor_last, temp_pval,
temp_mean_values ,same_mean)
# Increase data frame index
index <- index+1
}
}
}
length(which(df$`Mean the same` == T))
df[which(df$`Mean the same` == T),]
ttester
temp_mean_values
df[which(df$`Mean the same` == T),]
hist(data5[[2]], main = "Critical Reading of All Boroughs"
, xlab = "Critical Reading Score") # Crit Reading
borough_checker <- function(code){
borough <- 'NA'
if(grepl('X' ,code)) borough <- "Bronx"
if(grepl('K', code)) borough <- "Brooklyn"
if(grepl('Q', code)) borough <- "Queens"
if(grepl('M', code)) borough <- "Manhattan"
if(grepl('R', code)) borough <- "Staten Island"
return(borough)
}
df
col_names2
